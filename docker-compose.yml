---
version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    env_file:
      - ./.env.override/broker
    image: confluentinc/cp-enterprise-kafka:5.2.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      # - "29092:29092"
      - "9092:9092"
    environment:
      # KAFKA_BROKER_ID: 1
      # KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ZOOKEEPER_CONNECT: '${ZOOKEEPER_LIST}'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG_RETENTION_MINUTES: 60
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_SEGMENT_BYTES: 107374182
      KAFKA_LOG_RETENTION_CHECK_INTERVAL.MS: 60000
      KAFKA_LOG_SEGMENT_DELETE_DELAY.MS: 1000
      # CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: ${BROKER_LIST}
      # CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: ${ZOOKEEPER_LIST}
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: confluentinc/cp-schema-registry:5.2.1
    hostname: schema-registry
    container_name: schema-registry
    # depends_on:
    #   - zookeeper
    #   - broker
    ports:
      - "8081:8081"
    environment:
      # TODO: SCHEMA_REGISTRY_DEBUG: 'true'
      SCHEMA_REGISTRY_HOST_NAME: ${SCHEMA_REGISTRY_HOST}
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: ${ZOOKEEPER_LIST}

  connect:
    image: confluentinc/kafka-connect-datagen:latest
    build:
      context: .
      dockerfile: ./docker_volumes/connect/Dockerfile
    volumes:
      - ./docker_volumes/connect/schemas/:/schemas/
      - ./docker_volumes/connect/aws_credentials:/root/.aws/credentials
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      # CONNECT_BOOTSTRAP_SERVERS: 'broker1:29092'
      CONNECT_BOOTSTRAP_SERVERS: ${BROKER_LEADER}:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: "${CONNECT_HOST}"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://${SCHEMA_REGISTRY_HOST}:8081
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # Assumes image is based on confluentinc/kafka-connect-datagen:latest which is pulling 5.1.1 Connect image
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.2.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    command: "bash -c 'if [ ! -d /usr/share/confluent-hub-components/confluentinc-kafka-connect-datagen ]; then echo \"WARNING: Did not find directory for kafka-connect-datagen (did you remember to run: docker-compose up -d --build ?)\"; fi ; /etc/confluent/docker/run'"

  rest-proxy:
    image: confluentinc/cp-kafka-rest:5.2.1
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      # KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_BOOTSTRAP_SERVERS: '${BROKER_LIST}'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://${SCHEMA_REGISTRY_HOST}:8081'

  database:
    image: postgres
    volumes:
      - ./docker_volumes/database/:/docker-entrypoint-initdb.d/
    ports:
      - 5432:5432
    container_name: database

  control-center:
    env_file:
      - ./.env.override/control-center
    image: confluentinc/cp-enterprise-control-center:5.2.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - connect
      # - ksql-server
    ports:
      - "9021:9021"
    environment:
      # CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      # CONTROL_CENTER_BOOTSTRAP_SERVERS: '${BROKER_LIST}' # moved to env override
      # CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # CONTROL_CENTER_ZOOKEEPER_CONNECT: '${ZOOKEEPER_LIST}' # moved to env override
      CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083' # TODO: ${CONNECT_HOST}:8083
      # CONTROL_CENTER_KSQL_URL: "http://ksql-server:8088"
      # CONTROL_CENTER_KSQL_URL: "${KSQL_LIST}" # moved to env override
      # CONTROL_CENTER_KSQL_ADVERTISED_URL: "${BROKER_LEADER}:8088" # TODO: COMMENT # moved to env override
      # CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://${SCHEMA_REGISTRY_HOST}:8081" # moved to env override
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  ksql-server:
    env_file:
      - ./.env.override/ksql-server
    image: confluentinc/cp-ksql-server:5.2.1
    hostname: ksql-server
    container_name: ksql-server
    # depends_on:
    #   - broker
    #   - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      # KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      # KSQL_BOOTSTRAP_SERVERS: "${BROKER_LIST}" # moved to env override
      # KSQL_HOST_NAME: ksql-server
      # KSQL_HOST_NAME: ${KSQL_HOST} # moved to env override
      KSQL_APPLICATION_ID: "heart-watch"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      # KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://${SCHEMA_REGISTRY_HOST}:8081" # moved to env override
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"

  ksql-cli:
    image: confluentinc/cp-ksql-cli:5.2.1
    container_name: ksql-cli
    depends_on:
      # - broker
      # - connect
      - ksql-server
    entrypoint: /bin/sh
    tty: true
